#!/bin/bash
#comment
trap 'rm -f temp*; echo "Interupt recieved. Clearing temp files." 1>&2; exit 1' INT HUP TERM
dims() {
    #let file be a string containing data from the first argument passed if present,
    #otherwise file holds data from stdin     

    file=$(cat < "${1:-/dev/stdin}")

    #If the arguments passed are more than 1, send error message and abort.
    if [[ $# > 1 ]]; then
        echo "Error: 'dims' cannot accept more than one argument." 1>&2
        exit 1
    fi

    #The number of rows for any valid matrix = the number of '\n' characters it contains.
    numRows=$(echo "$file" | wc -l)

    #wc -w gives the number of 'words' in the data
    numWords=$(echo "$file" | wc -w)

    #The number of columns can be computed as the number of words / the number of columns
    echo -e "$numRows $((numWords / numRows))"
}

transpose() {
    #let file be a string containing data from the first argument passed if present,
    #otherwise file holds data from stdin

    file=$(cat < "${1:-/dev/stdin}")

    
    #If the arguments passed are more than 1, send error message and abort.
    if [[ $# > 1 ]]; then
        echo "Error: 'transpose' cannot accept more than one argument." 1>&2
        exit 1
    fi

    #The number of rows for any valid matrix = the number of '\n' characters it contains.
    #wc -w gives the number of 'words' in the data
    #The number of columns can be computed as the number of words / the number of columns
    numRows=$(echo "$file" | wc -l)
    numWords=$(echo "$file" | wc -w)
    numCol=$(($numWords / $numRows))

    #For each column of data, substitute newlines for tabs in that column
    #and append a final newline character. This transforms columns into rows,
    #where column n becomes row n.
    for ((i = 1; i <= $numCol; i++)); do
        echo -n "$file" | cut -f $i | tr '\n' '\t'
        echo
    done
}

getAverage() {
    #myLine is a string holding data from stdin
    read myLine
    sum=0
    count=0

    #for each tab delimited number, accumulate its value and 
    #increment our counter for how many numbers were processed
    for i in $myLine
    do
        ((count++))
        ((sum+=i))
    done
    #send to stdout the rounded average using sum and count
    echo -n $((($sum + ($count/2)*(($sum > 0)*2 - 1)) / $count))
}

mean() {
    #let file be a string containing data from the first argument passed if present,
    #otherwise file holds data from stdin

    file=$(cat < "${1:-/dev/stdin}")

    #If the arguments passed are more than 1, send error message and abort.
    if [[ $# > 1 ]]; then
        echo "Error: 'mean' cannot accept more than one argument." 1>&2
        exit 1
    fi

    #The number of rows for any valid matrix = the number of '\n' characters it contains.
    #wc -w gives the number of 'words' in the data
    #The number of columns can be computed as the number of words / the number of columns
    numRows=$(echo "$file" | wc -l)
    numWords=$(echo "$file" | wc -w)
    numCol=$(($numWords / $numRows))
    
    #For each data column of file, compute its average,
    #and send it to stdout with an appended tab unless it is the final average.
    #In which case, append newline character
    for ((i = 1; i <= $numCol; i++)); do
      echo -n "$file" | cut -f $i | tr '\n' '\t' | getAverage
      if [ $i -eq $numCol ]
      then
        echo
      else
        echo -e -n "\t"
      fi
    done
}

sumNums() {
    #send to stdout the sum of all values contained in stdin
    sum=0
    while read val; do
        ((sum+=val))
    done 
    echo -n $sum
}

add() {
    #If arguments are not exactly two, send error message to stderr and abort
    if [[ $# != 2 ]]; then
        echo "Error: 'add' can accept just two arguments." 1>&2
        exit 1
    #If matrices passed cannot be added due to mismatching dimensions
    #send error message to stderr and abort    
    elif [[ $(dims $1) != $(dims $2) ]]; then 
        echo "Error: 'add' defined only for matrices with the same dimensions."
        exit 1
    fi
    
    #The number of rows for any valid matrix = the number of '\n' characters it contains.
    #wc -w gives the number of 'words' in the data
    #The number of columns can be computed as the number of words / the number of columns
    numRows=$(cat $1 | wc -l)
    numWords=$(cat $1 | wc -w)
    numCol=$((numWords / numRows))


    temp1="temp1$$"

    #let temp1 be a file containg all of data $1 on one line
    #and all of data in $2 on the next line. Thus, the columns of data
    #in temp1 are the pairs of numbers we wish to sum
    paste -s $1 $2 > $temp1

    #For each column of data in temp1, 
    for ((i = 1; i <= $numWords; i++)); do
        cut -f $i $temp1 | sumNums
        if [[ $((i % numCol)) == 0 ]]
        then
            echo
        else
            echo -ne "\t"
        fi
    done
    rm $temp1
}

getColumns() {
    #The number of rows for any valid matrix = the number of '\n' characters it contains.
    #wc -w gives the number of 'words' in the data
    #The number of columns can be computed as the number of words / the number of columns

    numRows=$(cat $1 | wc -l)
    numWords=$(cat $1 | wc -w)
    echo -e "$((numWords / numRows))"
}

getRows() {
    echo -e $(cat "$1" | wc -l)
}
 
multiply() {
    if [[ $# != 2 ]]; then
        echo "Error: 'multiply' can accept just two arguments." 1>&2
        exit 1
    elif [[ $(getColumns $1) -ne $(getRows $2) ]]; then
            echo "Error: columns of $1 must equal rows of $2." 1>&2
            exit 1
    fi

    file1=$(cat < $1)
    file2=$(transpose $2 | cat)
    numR1=$(echo "$file1" | wc -l)
    numW1=$(echo "$file1" | wc -w)
    numC1=$(($numW1 / $numR1))

    numR2=$(echo "$file2" | wc -l)
    numW2=$(echo "$file2" | wc -w)
    numC2=$(($numW2 / $numR2))

    if [[ $numC1 = $numC2 ]]; then
        temp1="temp1$$"
        temp2="temp2$$"
        echo "$file1" > $temp1 
        echo "$file2" > $temp2
        while read -r line1; do
                while read -r line2; do
                   sum=0
                   for ((i = 1; i <= $numC1; i++)); do 
                        pair=$(echo -e "$line1\n$line2" | cut -f $i | tr '\n' '\t')
                        prod=1
                        for n in $pair; do
                            ((prod*=n))
                        done
                        ((sum+=prod))
                   done
                   echo -ne "$sum\t"
                done < $temp2
                echo
        done < $temp1
        rm $temp1 $temp2
    else
        echo "nope"
    fi
}

validate() {
    readable=1
    for file in "$@"
    do
        if ! [[ -r $file ]]
        then
            readable=0
        fi
    done
    echo $readable
}

if [[ $# != 0 ]]; then
    if [[ $(type -t $1) != "function" ]]; then
        echo "Error: '$1' is not a defined operation" 1>&2
    elif [[ $(validate ${@:2}) = 0 ]]; then
        echo "Error: An unreadable file was passed" 1>&2
    else
        $1 ${@:2}
        exit 0
    fi
else
    echo "Error: No arguments received." 1>&2
fi
exit 1
